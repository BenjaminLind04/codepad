function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(44/255, 46/255, 51/255, 1)

    self.view = vmath.matrix4()
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

    -- draw game objects
    local hw = render.get_window_width() / 2
    local hh = render.get_window_height() / 2
    local projection = vmath.matrix4_orthographic(-hw, hw, -hh, hh, -1, 1)
    local frustum = projection * self.view
    render.set_view(self.view)
    render.set_projection(projection)
    
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.disable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

    render.draw_debug3d()
    render.draw(self.tile_pred, { frustum = frustum })
    render.draw(self.particle_pred, { frustum = frustum })

    -- draw gui
    local view_gui = vmath.matrix4()
    local proj_gui = vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1)
    local frustum_gui = proj_gui * view_gui
    render.set_view(view_gui)
    render.set_projection(proj_gui)

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred, {frustum = frustum_gui})
    render.draw(self.text_pred, {frustum = frustum_gui})
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    end
end
